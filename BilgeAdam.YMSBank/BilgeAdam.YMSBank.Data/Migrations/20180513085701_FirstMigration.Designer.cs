// <auto-generated />
using BilgeAdam.YMSBank.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BilgeAdam.YMSBank.Data.Migrations
{
    [DbContext(typeof(YMSContext))]
    [Migration("20180513085701_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("CreatedBy");

                    b.Property<long>("CurrencyTypeId");

                    b.Property<bool>("IsActive");

                    b.Property<long>("OwnerId");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Accounts","Account");
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.AccountHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AccountId");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("CreatedBy");

                    b.Property<long>("HistoryTypeId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("HistoryTypeId");

                    b.ToTable("AccountHistories","Account");
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("CreatedBy");

                    b.Property<string>("CustomerNumber")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<bool>("IsActive");

                    b.Property<long>("PersonId");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Customers","Enterprise");
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("CreatedBy");

                    b.Property<long>("DepartmentId");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ManagerId");

                    b.Property<long>("PersonId");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PersonId");

                    b.ToTable("Employees","Enterprise");
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.GenericLookup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("CreatedBy");

                    b.Property<long>("GenericLookupTypeId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("Order");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("GenericLookupTypeId");

                    b.ToTable("GenericLookups","Enterprise");
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.GenericLookupType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("GenericLookupTypes","Enterprise");
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Area")
                        .HasMaxLength(50);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<long>("ParentId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus","Enterprise");
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("CreatedBy");

                    b.Property<string>("EMail")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("People","Enterprise");
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Roles","Enterprise");
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.Transfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("CreatedBy");

                    b.Property<long>("FromId");

                    b.Property<bool>("IsActive");

                    b.Property<long>("ToId");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Transfers","Finance");
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<string>("IsLocked")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<long>("PersonId");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("UpdatedBy");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Users","Enterprise");
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("CreatedBy");

                    b.Property<bool>("IsActive");

                    b.Property<long>("RoleId");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("UpdatedBy");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles","Enterprise");
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.Account", b =>
                {
                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.Customer", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.AccountHistory", b =>
                {
                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.GenericLookup", "HistoryType")
                        .WithMany()
                        .HasForeignKey("HistoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.Customer", b =>
                {
                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.Employee", b =>
                {
                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.GenericLookup", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.GenericLookup", b =>
                {
                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.GenericLookupType", "GenericLookupType")
                        .WithMany()
                        .HasForeignKey("GenericLookupTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.Menu", b =>
                {
                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.Menu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.Transfer", b =>
                {
                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.Account", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.Account", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.User", b =>
                {
                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BilgeAdam.YMSBank.Data.Entities.UserRole", b =>
                {
                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BilgeAdam.YMSBank.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
